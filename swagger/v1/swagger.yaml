---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    unauthorized:
      type: object
      properties:
        code:
          type: integer
          example: 401
        status:
          type: string
          example: Unauthorized
        data:
          type: string
          example: Unauthorized access in the API
    book_created:
      type: object
      properties:
        code:
          type: integer
          example: 201
        status:
          type: string
          example: Created
        data:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            owner_id:
              type: integer
            created_at:
              type: string
            updated_at:
              type: string
            status:
              type: string
            dead_line:
              type: string
            reader_user_id:
              type: integer
    book_successful:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: OK
        data:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            owner_id:
              type: integer
            created_at:
              type: string
            updated_at:
              type: string
            status:
              type: string
            dead_line:
              type: string
            reader_user_id:
              type: integer
    books_successful:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: OK
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              owner_id:
                type: integer
              created_at:
                type: string
              updated_at:
                type: string
              status:
                type: string
              dead_line:
                type: string
              reader_user_id:
                type: integer
    forbidden:
      type: object
      properties:
        code:
          type: integer
          example: 403
        status:
          type: string
          example: Forbidden
        data:
          type: string
          example: User is not moderator
    user_created:
      type: object
      properties:
        code:
          type: integer
          example: 201
        status:
          type: string
          example: Created
        data:
          type: object
          properties:
            id:
              type: integer
            mail:
              type: string
            token:
              type: string
    users:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: OK
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              mail:
                type: string
    user:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: OK
        data:
          type: object
          properties:
            id:
              type: integer
            mail:
              type: string
paths:
  "/api/v1/books/":
    get:
      summary: List of books
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Count of books on the page
          schema:
            type: integer
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/books_successful'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
    post:
      summary: Registration of the book
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book_created'

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
  "/api/v1/books/{id}":
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Show book
      tags:
        - Books
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book_successful'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
  "/api/v1/books/reserve/{id}":
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    put:
      summary: Reserve book
      tags:
        - Books
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book_successful'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
  "/api/v1/books/return/{id}":
    parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
    put:
      summary: Return book
      tags:
        - Books
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book_successful'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
  "/api/v1/book/user_read":
    get:
      summary: Show book which user read
      tags:
        - Books
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book_successful'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
  "/api/v1/book/own_books":
    get:
      summary: Show own books
      tags:
        - Books
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/books_successful'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
  "/api/v1/book/available_books":
    get:
      summary: Show available books
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Count of books on the page
          schema:
            type: integer
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/books_successful'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
  "/api/v1/book/return_to_owner/{id}":
    parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
    put:
      summary: Return book to owner
      tags:
        - Books
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book_successful'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
  "/api/v1/book/expired":
    get:
      summary: Show expired books
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Count of books on the page
          schema:
            type: integer
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/books_successful'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
  "/api/v1/users":
    get:
      summary: Show list of users
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Count of users on the page
          schema:
            type: integer
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
    post:
      summary: Registration of user
      tags:
        - Users
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_created'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
                password:
                  type: string
              required:
                - mail
                - password
  "/api/v1/users/{id}":
    parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: string
    get:
      summary: Show user
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
  "/api/v1/login":
    post:
      summary: Login
      tags:
        - Users
      parameters: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: integer
                    example: OK
                  data:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  status:
                    type: integer
                    example: Bad request
                  data:
                    type: string
                    example: Incorrect credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
                password:
                  type: string
              required:
                - mail
                - password
servers:
  - url: https://powerful-citadel-31931.herokuapp.com
    variables:
      defaultHost:
        default: https://powerful-citadel-31931.herokuapp.com
